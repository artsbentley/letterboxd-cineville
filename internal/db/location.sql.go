// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: location.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const assignUserLocation = `-- name: AssignUserLocation :exec
INSERT INTO user_locations (user_id, location_id)
VALUES ($1, $2)
ON CONFLICT DO NOTHING
`

type AssignUserLocationParams struct {
	UserID     uuid.UUID `json:"user_id"`
	LocationID uuid.UUID `json:"location_id"`
}

func (q *Queries) AssignUserLocation(ctx context.Context, arg AssignUserLocationParams) error {
	_, err := q.db.Exec(ctx, assignUserLocation, arg.UserID, arg.LocationID)
	return err
}

const createLocation = `-- name: CreateLocation :one
INSERT INTO locations (city)
VALUES ($1)
ON CONFLICT (city) DO UPDATE SET city = EXCLUDED.city
RETURNING id
`

func (q *Queries) CreateLocation(ctx context.Context, city string) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createLocation, city)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getLocationByCity = `-- name: GetLocationByCity :one
SELECT id FROM locations WHERE city = $1
`

func (q *Queries) GetLocationByCity(ctx context.Context, city string) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, getLocationByCity, city)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

const getUserLocationCities = `-- name: GetUserLocationCities :many
SELECT l.city
FROM locations l
JOIN user_locations ul ON l.id = ul.location_id
WHERE ul.user_id = $1
`

func (q *Queries) GetUserLocationCities(ctx context.Context, userID uuid.UUID) ([]string, error) {
	rows, err := q.db.Query(ctx, getUserLocationCities, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []string{}
	for rows.Next() {
		var city string
		if err := rows.Scan(&city); err != nil {
			return nil, err
		}
		items = append(items, city)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
