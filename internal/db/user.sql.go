// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, letterboxd_username)
VALUES ($1, $2)
RETURNING id, email, letterboxd_username, created_at, updated_at, watchlist
`

type CreateUserParams struct {
	Email              string `json:"email"`
	LetterboxdUsername string `json:"letterboxd_username"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Email, arg.LetterboxdUsername)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.LetterboxdUsername,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Watchlist,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, letterboxd_username, created_at, updated_at, watchlist
FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.LetterboxdUsername,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Watchlist,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, letterboxd_username, created_at, updated_at, watchlist
FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.LetterboxdUsername,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Watchlist,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, email, letterboxd_username, created_at, updated_at, watchlist
FROM users
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.LetterboxdUsername,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Watchlist,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
  email = $2,
  letterboxd_username = $3,
  watchlist = $4,
  updated_at = NOW()
WHERE id = $1
RETURNING id, email, letterboxd_username, created_at, updated_at, watchlist
`

type UpdateUserParams struct {
	ID                 uuid.UUID `json:"id"`
	Email              string    `json:"email"`
	LetterboxdUsername string    `json:"letterboxd_username"`
	Watchlist          []string  `json:"watchlist"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Email,
		arg.LetterboxdUsername,
		arg.Watchlist,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.LetterboxdUsername,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Watchlist,
	)
	return i, err
}
